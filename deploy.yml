---

- hosts: local
  tasks:
      # Reinitialize every time, in case Terraform
      #   plugins get added in at any point.
      # Don't report as changed each time, though.
    - name: Initialize Terraform
      command: terraform init
      changed_when: false

    - name: Deploy AWS environment
      terraform:
        project_path: "{{ ansible_env.PWD }}"
        state: present

    - name: Determine terraform deployed instances
      command: jq -r '.resources[] | select(.type == "aws_instance") | .instances[].attributes.public_dns' terraform.tfstate
      register: terraform_state

      # This inventory is only added in memory.
    - name: Add terraform hosts to web_nodes group
      add_host:
        name: "{{ item }}"
        groups: web_nodes
      with_items:
        - "{{ terraform_state.stdout_lines }}"



- hosts: web_nodes
  gather_facts: false
  become: true
  remote_user: ubuntu
  handlers:
    - name: Restart nginx
      service:
        name: nginx
        state: restarted
        enabled: yes

      # We want to give the Python app some extra time for
      # a failure and/or startup, just in case.
    - name: Sleep 5 seconds
      pause:
        seconds: 5

    - name: Validate flask service
      command: systemctl is-active python-covariance-matrix-flask.service

    - name: Validate nginx service
      command: systemctl is-active nginx.service
  tasks:
    - name: Wait for new hosts to be available
      wait_for_connection:
        timeout: 300

      # New box means we should update the cache.
      # TODO
      #   Well, kind of. A security policy update or something
      #   else could trigger this to run.
    - name: Update all packages
      apt:
        name: '*'
        state: latest
        update_cache: yes
      register: update_packages

      # Back in my day, we didn't have a fancy
      #   reboot module *shakes fist*
      #
      # Only run this if we actually patched.
      # Default timeout of 10 minutes, but let's give it
      #   15 seconds after coming up before continuing.
    - name: Wait for host after reboot
      reboot:
        post_reboot_delay: 15
      when:
        update_packages is changed

    - name: Install required packages
      apt:
        name:
          - nginx
          - python3-pip
        state: present
        update_cache: yes

    - name: Create flask folder structure
      file:
        path: /opt/flask
        state: directory
        mode: 0755

    - name: Copy python script
      copy:
        src: files/main.py
        dest: /opt/flask/

    - name: Create required pip libraries
      pip:
        name:
          - pandas
          - flask
          - waitress
        state: present

    - name: Copy flask systemd service
      copy:
        src: files/python-covariance-matrix-flask.service
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: 0644
      register: flask_systemd_cp

      # This is required for systemd to properly see changes to its files.
    - name: Reload systemd
      command: systemctl daemon-reload
      when:
        flask_systemd_cp is changed

    - name: Start flask service
      service:
        name: python-covariance-matrix-flask
        state: started
        enabled: yes
      notify:
        - Sleep 5 seconds
        - Validate flask service

    - name: Disable default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Restart nginx

    - name: Copy nginx configuration
      copy:
        src: files/python-proxy.conf
        dest: /etc/nginx/sites-available/
        mode: 0644
      notify:
        - Restart nginx
        - Validate nginx service

    - name: Enable flask proxy site
      file:
        path: /etc/nginx/sites-enabled/python-proxy.conf
        src: /etc/nginx/sites-available/python-proxy.conf
        state: link
      notify:
        - Restart nginx
        - Validate nginx service



- hosts: local
  gather_facts: false
  tasks:
    - name: Validate remote website
      uri:
        url: http://{{ item }}/calculate
        method: POST
        headers:
          Content-Type: text/plain
        body: '(1.115,2.119), (1.108,2.220), (1.101,2.209), (1.110,2.209), (1.112,2.212)'
      register: url_output
      with_items:
        - "{{ groups['web_nodes'] }}"

    - debug: var=url_output

