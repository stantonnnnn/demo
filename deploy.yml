---

- hosts: local
  tasks:
      # Reinitialize every time, in case Terraform
      #   plugins get added in at any point.
      # Don't report as changed each time, though.
    - name: Initialize Terraform
      command: terraform init
      changed_when: false

    - name: Deploy AWS environment
      terraform:
        project_path: "{{ ansible_env.PWD }}"
        state: present

    - name: Determine terraform deployed instances
      command: jq -r '.resources[] | select(.type == "aws_instance") | .instances[].attributes.public_dns' terraform.tfstate
      changed_when: false
      register: terraform_state

      # This inventory is only added in memory.
    - name: Add terraform hosts to web_nodes group
      add_host:
        name: "{{ item }}"
        groups: web_nodes
      with_items:
        - "{{ terraform_state.stdout_lines }}"

      # TODO Ansible gets this a second time after Terraform.
      # We could use the module, but it takes more lines to change
      #   the user agent than to do a single command here.
      # Don't warn us that there's the `uri` module.
    - name: Determine local IP address
      command:
        cmd: curl http://ipv4.icanhazip.com
        warn: false
      register: local_pub_ip



- hosts: web_nodes
  gather_facts: false
  become: true
  remote_user: ubuntu
  handlers:
      # Ensure postfix is down, if it doesn't like the
      #   config. We don't want it, potentially, staying
      #   up and becoming a mail relay for the whole world.
    - name: Restart postfix
      service:
        name: postfix
        state: restarted
        enabled: yes
      ignore_errors: true
      register: postfix_restart

    - name: Emergency disable postfix
      service:
        name: postfix
        state: stopped
        enabled: no
      failed_when:
        postfix_restart is failed
      when:
        postfix_restart is failed

    - name: Restart fail2ban
      service:
        name: fail2ban
        state: restarted
        enabled: yes

    - name: Restart covariance container
      docker_container:
        name: covariance
        state: restart
      when:
        covariance_app is changed and
        covariance_container is not changed

      # Force a container restart, if it appears the config
      #   changed, but the container didn't.
    - name: Restart nginx container
      docker_container:
        name: nginx
        state: restart
      when:
        nginx_config is changed and
        nginx_container is not changed
  tasks:
    - name: Wait for new hosts to be available
      wait_for_connection:
        timeout: 300

      # New box means we should update the cache.
      # TODO
      #   Well, kind of. A security policy update or something
      #   else could trigger this to run.
    - name: Update all packages
      apt:
        name: '*'
        state: latest
        update_cache: yes
      register: update_packages

      # Back in my day, we didn't have a fancy
      #   reboot module *shakes fist*
      #
      # Only run this if we actually patched.
      # Default timeout of 10 minutes, but let's give it
      #   15 seconds after coming up before continuing.
    - name: Wait for host after reboot
      reboot:
        post_reboot_delay: 15
      when:
        update_packages is changed

      # We need email capabilities for fail2ban notifications.
      # We also need additional stuff for Docker.
      #https://docs.docker.com/install/linux/docker-ce/ubuntu/
    - name: Install required packages
      apt:
        name:
          - fail2ban
          - mailutils
          - apt-transport-https
          - gnupg-agent
          - python-docker
          - python3-docker
        state: present
        update_cache: yes

    - name: Install apt key for Docker repo
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Install the Docker CE repo
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Create Docker directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: yes
      with_items:
        - /tmp/docker-builds
        - /var/lib/docker-volumes/covariance
        - /var/lib/docker-volumes/nginx

    - name: Copy Dockerfile
      copy:
        src: docker/python/Dockerfile
        dest: /tmp/docker-builds/

    - name: Copy covariance app
      copy:
        src: files/main.py
        dest: /var/lib/docker-volumes/covariance
      register: covariance_app
      notify:
        - Restart covariance container

    - name: Copy nginx configuration
      copy:
        src: files/python-proxy.conf
        dest: /var/lib/docker-volumes/nginx/
      register: nginx_config
      notify:
        - Restart nginx container

      # TODO: Build this elsewhere, and have the image ready to go in a repo.
      # TODO: Force a build tag update upon the Dockerfile task updating above.
    - name: Build Python container
      docker_image:
        name: democo/covariance-env
        tag: latest
        build:
          path: /tmp/docker-builds/
          pull: yes
        source: build

    - name: Copy python script
      copy:
        src: files/main.py
        dest: /var/lib/docker-volumes/covariance/

    - name: Create Docker network
      docker_network:
        name: covariance_net

      # The container doesn't know where the flask app is in /app,
      #   so the environment variable is required here. That's one
      #   less layer on the image, anyway.
    - name: Start covariance container
      docker_container:
        name: covariance
        state: started
        image: democo/covariance-env
        restart_policy: unless-stopped
        networks_cli_compatible: yes
        env:
          FLASK_APP: /app/main.py
        volumes:
          - /var/lib/docker-volumes/covariance:/app:ro
        networks:
          - name: covariance_net
            aliases: covariance
      register: covariance_container

      # TODO: Configure update tag for these containers, instead of
      #   updating during each execution.
    - name: Start nginx container
      docker_container:
        name: nginx
        state: started
        image: nginx
        restart_policy: unless-stopped
        networks_cli_compatible: yes
        pull: yes
        volumes:
          - /var/lib/docker-volumes/nginx/:/etc/nginx/conf.d/:ro
        published_ports:
          - "80:80"
        networks:
          - name: covariance_net
            aliases: nginx
      register: nginx_container

      # Postfix immediately starts up after install, listening to the whole world.
      #   What an *awful* default.
      # Change the destinations that are allowed for our gmail clients and internal
      #   example.com domain.
    - name: Configure postfix for localhost output only
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: "{{ item.backup }}"
      with_items:
        - { regexp: '^inet_interfaces\s?=', line: 'inet_interfaces = localhost', backup: yes }
        - { regexp: '^myhostname\s?=', line: 'myhostname = example.com', backup: no }
        - { regexp: '^myorigin\s?=', line: 'myorigin = example.com', backup: no }
      notify:
        - Restart postfix

    - name: Configure fail2ban
      template:
        src: templates/jail.local
        dest: /etc/fail2ban/
      notify:
        - Restart fail2ban

      # SSH has to be the first rule, otherwise, we could lock ourselves out
      #   from the VM!
    - name: Enable ufw rules
      ufw:
        rule: allow
        state: enabled
        to_port: "{{ item.to_port }}"
        from_ip: "{{ item.from_ip }}"
        proto: "{{ item.proto }}"
        log: "{{ item.log }}"
      with_items:
        - { to_port: 22, from_ip: "{{ hostvars['localhost']['local_pub_ip']['stdout'] }}", proto: "tcp", log: "yes" }
        - { to_port: 80, from_ip: "any", proto: "tcp", log: "no" }



- hosts: local
  gather_facts: false
  tasks:
    - name: Validate remote website
      uri:
        url: http://{{ item }}/calculate
        method: POST
        headers:
          Content-Type: text/plain
        body: '(1.115,2.119), (1.108,2.220), (1.101,2.209), (1.110,2.209), (1.112,2.212)'
      register: url_output
      with_items:
        - "{{ groups['web_nodes'] }}"

    - debug: var=url_output

